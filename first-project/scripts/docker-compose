#!/bin/bash

set -e
cd `dirname $0`
cd ../docker

# get all args
args=("$@")

# if .env doesn't exist create it
if [ ! -f ../.env ]; then
  touch ../.env
fi

# load env vars from ../.env
source ../.env

function ensure_env_ends_with_newline() {
  # if the last line of the file is not empty, add a newline
  if [ -n "$(tail -c 1 ../.env)" ]; then
    echo "" >> ../.env
  fi
}

function add_to_env() {
  # add the key and value to the end of the .env file
  ensure_env_ends_with_newline
  echo "$1" >> ../.env
}

# make sure we have ADMIN_PASSWORD
if [ -z "$ADMIN_PASSWORD" ]; then
  echo "ADMIN_PASSWORD is not set, generating and adding to .env..."
  # generate and add to the end of .env file
  ADMIN_PASSWORD=$(dd bs=64 count=1 if=/dev/urandom 2>/dev/null | base64 | LC_ALL=C tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
  add_to_env "ADMIN_PASSWORD=$ADMIN_PASSWORD"
fi

# make sure we have APP_NAME
if [ -z "$APP_NAME" ]; then
  # APP_NAME should be the name of the parent directory
  APP_NAME=$(basename $(dirname $(pwd)))
  echo "APP_NAME is not set, setting to $APP_NAME adding to .env..."
  add_to_env "APP_NAME=$APP_NAME"
fi

# make sure we have NODE_ENV
if [ -z "$NODE_ENV" ]; then
  echo "NODE_ENV is not set, setting to development and adding to .env..."
  add_to_env "NODE_ENV=development"
  NODE_ENV=development
fi

# run docker compose with the args
docker compose -p "$APP_NAME" --env-file ../.env "$@"
